From 34a3cbbbe8092c17cbf3214b9bb06527d3a16743 Mon Sep 17 00:00:00 2001
From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
Date: Tue, 12 May 2015 13:40:30 +0100
Subject: [PATCH 4/7] Mount plan9 mounts inside the guest.
Organization: Intel Corporation (UK) Ltd. - Co. Reg. #1134945 - Pipers Way, Swindon SN3 1RJ

---
 stage1/init/init.go |  2 +-
 stage1/init/path.go |  5 +++++
 stage1/init/pod.go  | 33 ++++++++++++++++++++++++++++++---
 3 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/stage1/init/init.go b/stage1/init/init.go
index 91ae323..67ae894 100644
--- a/stage1/init/init.go
+++ b/stage1/init/init.go
@@ -321,7 +321,7 @@ func stage1() int {
 		defer unregisterPod(p)
 	}
 
-	if err = p.PodToSystemd(interactive); err != nil {
+	if err = p.PodToSystemd(interactive, virtualisation); err != nil {
 		fmt.Fprintf(os.Stderr, "Failed to configure systemd: %v\n", err)
 		return 2
 	}
diff --git a/stage1/init/path.go b/stage1/init/path.go
index b33ee36..b24311d 100644
--- a/stage1/init/path.go
+++ b/stage1/init/path.go
@@ -42,6 +42,11 @@ func ServiceUnitPath(root string, imageID types.Hash) string {
 	return filepath.Join(common.Stage1RootfsPath(root), unitsDir, ServiceUnitName(imageID))
 }
 
+// UnitPath returns the path to a systemd unit file for a given root
+func UnitPath(root string, unit_name string) string {
+	return filepath.Join(common.Stage1RootfsPath(root), unitsDir, unit_name)
+}
+
 // RelEnvFilePath returns the path to the environment file for the given imageID
 // relative to the pod's root
 func RelEnvFilePath(imageID types.Hash) string {
diff --git a/stage1/init/pod.go b/stage1/init/pod.go
index 89e5528..a484c6a 100644
--- a/stage1/init/pod.go
+++ b/stage1/init/pod.go
@@ -126,7 +126,7 @@ func newUnitOption(section, name, value string) *unit.UnitOption {
 }
 
 // appToSystemd transforms the provided RuntimeApp+ImageManifest into systemd units
-func (p *Pod) appToSystemd(ra *schema.RuntimeApp, am *schema.ImageManifest, interactive bool) error {
+func (p *Pod) appToSystemd(ra *schema.RuntimeApp, am *schema.ImageManifest, interactive bool, virtualisation string) error {
 	name := ra.Name.String()
 	id := ra.Image.ID
 	app := am.App
@@ -250,6 +250,33 @@ func (p *Pod) appToSystemd(ra *schema.RuntimeApp, am *schema.ImageManifest, inte
 	opts = append(opts, newUnitOption("Unit", "Requires", InstantiatedPrepareAppUnitName(id)))
 	opts = append(opts, newUnitOption("Unit", "After", InstantiatedPrepareAppUnitName(id)))
 
+	if (virtualisation == "kvm") {
+		// need to mount p9 qemu mount_tags
+		for _, mp := range app.MountPoints {
+			mnt_what := mp.Name.String()
+			mnt_where := filepath.Join(common.RelAppRootfsPath(id), mp.Path)
+			mnt_name := unit.UnitNamePathEscape(mnt_where)+".mount"
+			mnt_opts := []*unit.UnitOption{
+				newUnitOption("Mount", "What", mnt_what),
+				newUnitOption("Mount", "Where", mnt_where),
+				newUnitOption("Mount", "Type", "9p"),
+				newUnitOption("Mount", "Options", "trans=virtio"),
+			}
+
+			file, err := os.OpenFile(UnitPath(p.Root, mnt_name), os.O_WRONLY|os.O_CREATE, 0644)
+			if err != nil {
+				return fmt.Errorf("failed to create mount unit file: %v", err)
+			}
+			defer file.Close()
+
+			if _, err = io.Copy(file, unit.Serialize(mnt_opts)); err != nil {
+				return fmt.Errorf("failed to write mount unit file: %v", err)
+			}
+
+			opts = append(opts, newUnitOption("Unit", "Requires", mnt_name))
+		}
+	}
+
 	file, err := os.OpenFile(ServiceUnitPath(p.Root, id), os.O_WRONLY|os.O_CREATE, 0644)
 	if err != nil {
 		return fmt.Errorf("failed to create service unit file: %v", err)
@@ -287,14 +314,14 @@ func (p *Pod) writeEnvFile(env types.Environment, id types.Hash) error {
 
 // PodToSystemd creates the appropriate systemd service unit files for
 // all the constituent apps of the Pod
-func (p *Pod) PodToSystemd(interactive bool) error {
+func (p *Pod) PodToSystemd(interactive bool, virtualisation string) error {
 	for _, am := range p.Apps {
 		ra := p.Manifest.Apps.Get(am.Name)
 		if ra == nil {
 			// should never happen
 			panic("app not found in pod manifest")
 		}
-		if err := p.appToSystemd(ra, am, interactive); err != nil {
+		if err := p.appToSystemd(ra, am, interactive, virtualisation); err != nil {
 			return fmt.Errorf("failed to transform app %q into systemd service: %v", am.Name, err)
 		}
 	}
-- 
2.1.4

